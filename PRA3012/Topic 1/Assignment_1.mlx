% functions
function [x, t] = sampling(f, v_s, T)
% calculates x and t for f(t) and given parameters
    % compute time steps
    n = T * v_s;
    t = (0:(n-1))/n;
    % evaluate function for all t
    x = f(t);
end

f = @(t)sin(4*pi*t)./(3+sin(2*pi*t));
v_1 = 8;
v_2 = 50;
T = 2;

[x_1, t_1] = sampling(f, v_1, T);
[x_2, t_2] = sampling(f, v_2, T);

clf;
fplot(f, [0, T]); 
hold on;
plot(t_1,x_1,t_2, x_2);
xlabel('time[s]');
legend('v_s = 8 Hz', 'v_s = 50 Hz');

Discrete Fourier Analysis
function [a, b] = dft(x)
% computes fourier coefficients from 
% initialize arrays for coefficients of size k
if length(x) > 50
    k = length(x);
else
    k = 50;
end
a = zeros(k, 1);
b = zeros(k, 1);
% compute coefficients using summation approximation
    for j = 1:k
        sum_a = 0;
        sum_b = 0;
        for i = 1:length(x)
            sum_a = sum_a + x(i).*cos((2*pi*i*j)/length(x));
            sum_b = sum_b + x(i).*sin((2*pi*i*j)/length(x));
        end
        a(j) = 2*sum_a/length(x);
        b(j) = 2*sum_b/length(x);
    end
end

% different functions for testing
f_1 = @(t)sin(10*pi*t).*sin(16*pi*t);
f_2 = @(t)sin(10.*pi.*t)./(2+sin(4.*pi.*t));
f_3 = @(t)floor(mod(t+1, 2)-1);
f_4 = @(t)floor(mod(t+1, 2));

% calculate samples, w/ parameters (function, sampling_f, period)
v_s = 50;
T = 1;

[x, t] = sampling(f_1, v_s, T);
clf;
fplot(f_1, [0, T]);
hold;
plot(t, x);

% calculate power spectrum and amplitudes
[a, b] = dft(x);
A = sqrt(a.^2+b.^2);

% parameters for plotting
K = length(A);
v = (0:K-1)/T;
clf;
plot(v, A);
title('Magnitude Spectrum of x')
xlabel('frequency [Hz]'), ylabel('amplitude');
